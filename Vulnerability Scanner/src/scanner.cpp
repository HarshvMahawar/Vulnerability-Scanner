#include "scanner.hpp"
#include "utils.hpp"
#include <iostream>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <cstring>
#include <thread>
#include <vector>

bool is_valid_ip(const std::string& ip) {
    std::regex ip_pattern(
        R"((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)");
    return std::regex_match(ip, ip_pattern);
}

// Constructor
VulnerabilityScanner::VulnerabilityScanner(const std::string& target_ip) : target_ip(target_ip) {}

// Check if a port is open
bool VulnerabilityScanner::is_port_open(int port) {
    int sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock < 0) {
        return false;
    }

    sockaddr_in addr;
    memset(&addr, 0, sizeof(addr));
    addr.sin_family = AF_INET;
    addr.sin_port = htons(port);
    addr.sin_addr.s_addr = inet_addr(target_ip.c_str());

    int result = connect(sock, (sockaddr*)&addr, sizeof(addr));
    close(sock);

    return result == 0;
}

// Detect the service name (dummy implementation)
std::string VulnerabilityScanner::detect_service_name(int port) {
    // Dummy implementation - in real case, this could involve sending specific data
    return get_service_name(port);
}

// Scan a range of ports using multiple threads
void VulnerabilityScanner::scan_port_range(int start_port, int end_port) {
    std::vector<std::future<void>> futures;
    for (int port = start_port; port <= end_port; ++port) {
        futures.push_back(std::async(std::launch::async, [this, port]() {
            if (is_port_open(port)) {
                open_ports.push_back(port);
                service_map[port] = detect_service_name(port);
            }
        }));
    }
    for (auto& fut : futures) {
        fut.get();
    }
}

// Scan ports
void VulnerabilityScanner::scan_ports(int start_port, int end_port) {
    scan_port_range(start_port, end_port);
}

// Print results
void VulnerabilityScanner::print_results() const {
    std::cout << "Open ports on " << target_ip << ":\n";
    for (int port : open_ports) {
        std::cout << "Port: " << port << ", Service: " << service_map.at(port) << "\n";
    }
}
